plugins {
	id 'org.springframework.boot' version '2.6.11'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'war'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "org.flywaydb.flyway" version "7.15.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

ext {
	set('springCloudVersion', "2021.0.4")
	set('queryDslVersion', "5.0.0")
}

war {
    enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.flywaydb:flyway-core:7.15.0'
	implementation 'org.modelmapper:modelmapper:3.1.0'
	implementation 'org.modelmapper:modelmapper-module-jsr310:1.2.3'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'com.google.cloud:spring-cloud-gcp-starter:3.0.0'
    implementation 'com.google.cloud:spring-cloud-gcp-storage:3.0.0'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
   jpa = true
   querydslSourcesDir = querydslDir
}
sourceSets {
   main.java.srcDir querydslDir
}
configurations {
   querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
   options.annotationProcessorPath = configurations.querydsl
}